#include <iostream>
#include <clocale>
#include <cmath>
using namespace std;
int ** create_matrix(int n, int m)
{
    int **A = new int*[n];
    for(int i = 0; i<n;i++)
    {
        A[i] = new int[m];
    }
    return A;
}
void input_matrix(int **A, int n, int m){
    for (int i=0; i < n;i++){
        for (int j=0; j<m;j++){
            cout << "Введите элемент с индексом =" << i+1 << j+1 << endl;
            cin >> A[i][j];
        }
    }
}
void input_matrix_special(int **A, int n, int m){
    for (int i=0; i < n;i++){
        for (int j=0; j<m;j++){
            A[i][j] = 0;
        }
    }
}
void output_matrix(int **A, int n, int m){
    for(int i=0;i<n;i++){
        for(int j=0;j<m;j++){
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
}
void output_matrix_componly(int**A,int n, int y){
    for(int i=0;i<n;i++){
        for(int j=0;j<y;j++){
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
}
void sum_matrix(int **A,int **B, int **Res, int n, int m){
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<m;j++)
        {
            Res[i][j] += A[i][j] + B[i][j];
        }
    }
}
void comp_matrix(int **A,int **B,int **Res, int n, int m, int x, int y){
    for (int i=0;i<n;i++)
    {
        for (int j=0;j<y;j++)
        {
            for(int k=0;k<m;k++)
                Res[i][j] += A[i][k] * B[k][j];
        }
    }
}
int det_matrix(int **A, int n) {
    int **mn = create_matrix(n, n);
    int **resulty = create_matrix(n, n);
    if (n == 1)
        return A[0][0];
    else if (n == 2)
        return A[0][0] * A[1][1] - A[0][1] * A[1][0];
    else {
        int det = 0;
        for (int k = 0; k < n; k++) {
            int **m = new int *[n - 1];
            for (int i = 0; i < n - 1; i++) {
                m[i] = new int[n - 1];
            }
            for (int i = 1; i < n; i++) {
                int t = 0;
                for (int j = 0; j < n; j++) {
                    if (j == k)
                        continue;
                    m[i - 1][t] = A[i][j];
                    t++;
                }
            }
            det += pow(-1, k + 2) * A[0][k] * det_matrix(m, n - 1);
            int minorindex = pow(-1, k + 2) * det_matrix(m, n - 1);
            for (int b = 0; b < n; b++) {
                for (int g = 0; g < n; g++) {
                    input_matrix_special(mn, n, n);
                    mn[b][g] += minorindex;
                }
            }
        }
        for (int b = 0; b < n; b++) {
            for (int g = 0; g < n; g++) {
                resulty[b][g] += mn[b][g] / det;
            }
        }
            }
        }
    }
}


int main() {
    setlocale(LC_ALL, "RUS");
    int n,m,det;
    cout << "Введи размер матрицы(строки и столбцы)" << endl;
    cin >> n >> m;
    int **T = create_matrix(n,m);
    input_matrix(T,n,m);
    output_matrix(det_matrix(T,n),n,n)
}
